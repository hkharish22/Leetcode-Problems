class Solution {
public:
    ListNode*middlenode(ListNode*head){
        if(head==NULL || head->next==NULL)return head;
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast->next!=NULL && fast->next->next!= NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }


    ListNode*reverseLL(ListNode*head){
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode*prev=NULL;
        ListNode*curr=head;
        ListNode*next=NULL;
        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;       
        }
        head=prev;
        return head;
    }


    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return true;
        }
       ListNode*mid=middlenode(head);
       ListNode*newhead=mid->next;
        mid->next=NULL;
        newhead=reverseLL(newhead);
        ListNode*curr1=head;
        ListNode*curr2=newhead;
        bool res=true;
        while(curr1!=NULL && curr2!=NULL){
            if(curr1->val!=curr2->val){
                res=false;
                return res;
                break;
                }  
            curr1=curr1->next;
            curr2=curr2->next;
               }
        newhead=reverseLL(newhead);
         mid->next=newhead;
        return res;
       }};
