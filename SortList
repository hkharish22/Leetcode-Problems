class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL) return head;
        ListNode*mid=midnode(head);
        ListNode*newhead=mid->next;
        mid->next=NULL;
        return mergetwoLL(sortList(head), sortList(newhead));
        
        
    }
     ListNode* mergetwoLL(ListNode* l1,ListNode*l2) {
         if(l1==NULL ||l2==NULL) return l1!=NULL?l1:l2;
         ListNode*c1=l1;
         ListNode*c2=l2;
         ListNode*dummy=new ListNode(-1);
         ListNode*prev=dummy;
         while(c1!=NULL&&c2!=NULL){
             if(c1->val<=c2->val){
                 prev->next=c1;
                 c1=c1->next;
             }
             else{
                 prev->next=c2;
                 c2=c2->next;
             }
              prev=prev->next;
         }
         prev->next=c1!=NULL?c1:c2;
         return dummy->next;
       
        
    }
    
    ListNode* midnode(ListNode* head) {
        if(head==NULL  && head->next==NULL) return head;
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    
};
